// ðŸ”¥ Auto-generated by Sage Router - DO NOT EDIT!
// This file will be automatically generated when the plugin runs

export interface SageRoute {
  path: string
  component: () => Promise<any>
  name?: string
  meta: Record<string, any>
  params: string[]
}

export const routes: SageRoute[] = []

export const routeMap = new Map(routes.map(route => [route.path, route]))

// Route matching helper
export function matchRoute(path: string): SageRoute | null {
  // First try exact match
  const exact = routeMap.get(path)
  if (exact) return exact
  
  // Try pattern matching for dynamic routes
  for (const route of routes) {
    if (route.params.length > 0) {
      const pattern = route.path.replace(/:(\w+)(\*)?/g, (_, param, catchAll) => {
        return catchAll ? '(.*)' : '([^/]+)'
      })
      const regex = new RegExp('^' + pattern + '$')
      if (regex.test(path)) {
        return route
      }
    }
  }
  
  return null
}

// Extract params from path
export function extractParams(routePath: string, actualPath: string): Record<string, string> {
  const route = routeMap.get(routePath) || matchRoute(actualPath)
  if (!route || route.params.length === 0) return {}
  
  const pattern = route.path.replace(/:(\w+)(\*)?/g, (_, param, catchAll) => {
    return `(${catchAll ? '.*' : '[^/]+'})`
  })
  const regex = new RegExp('^' + pattern + '$')
  const matches = actualPath.match(regex)
  
  if (!matches) return {}
  
  const params: Record<string, string> = {}
  route.params.forEach((param, index) => {
    params[param] = matches[index + 1]
  })
  
  return params
}